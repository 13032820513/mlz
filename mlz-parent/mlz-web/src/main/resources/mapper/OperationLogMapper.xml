<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mlz.dao.OperationLogMapper">
  <resultMap id="BaseResultMap" type="com.mlz.entity.pojo.OperationLog">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="log_type" jdbcType="VARCHAR" property="logType" />
    <result column="log_name" jdbcType="VARCHAR" property="logName" />
    <result column="class_name" jdbcType="VARCHAR" property="className" />
    <result column="updata_front" jdbcType="VARCHAR" property="updataFront" />
    <result column="updata_after" jdbcType="VARCHAR" property="updataAfter" />
    <result column="succeed" jdbcType="VARCHAR" property="succeed" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="updatetime" jdbcType="TIMESTAMP" property="updatetime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.mlz.entity.pojo.OperationLogWithBLOBs">
    <result column="method" jdbcType="LONGVARCHAR" property="method" />
    <result column="message" jdbcType="LONGVARCHAR" property="message" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, log_type, log_name, class_name, updata_front, updata_after, succeed, 
    createtime, updatetime, deleted
  </sql>
  <sql id="Blob_Column_List">
    method, message
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.mlz.entity.pojo.OperationLogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from jia_operation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.mlz.entity.pojo.OperationLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from jia_operation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from jia_operation_log
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from jia_operation_log
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.mlz.entity.pojo.OperationLogExample">
    delete from jia_operation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.mlz.entity.pojo.OperationLogWithBLOBs">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into jia_operation_log (user_id, log_type, log_name, 
      class_name, updata_front, updata_after, 
      succeed, createtime, updatetime, 
      deleted, method, message
      )
    values (#{userId,jdbcType=INTEGER}, #{logType,jdbcType=VARCHAR}, #{logName,jdbcType=VARCHAR}, 
      #{className,jdbcType=VARCHAR}, #{updataFront,jdbcType=VARCHAR}, #{updataAfter,jdbcType=VARCHAR}, 
      #{succeed,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP}, 
      #{deleted,jdbcType=BIT}, #{method,jdbcType=LONGVARCHAR}, #{message,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.mlz.entity.pojo.OperationLogWithBLOBs">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into jia_operation_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="logType != null">
        log_type,
      </if>
      <if test="logName != null">
        log_name,
      </if>
      <if test="className != null">
        class_name,
      </if>
      <if test="updataFront != null">
        updata_front,
      </if>
      <if test="updataAfter != null">
        updata_after,
      </if>
      <if test="succeed != null">
        succeed,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="updatetime != null">
        updatetime,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="method != null">
        method,
      </if>
      <if test="message != null">
        message,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="logType != null">
        #{logType,jdbcType=VARCHAR},
      </if>
      <if test="logName != null">
        #{logName,jdbcType=VARCHAR},
      </if>
      <if test="className != null">
        #{className,jdbcType=VARCHAR},
      </if>
      <if test="updataFront != null">
        #{updataFront,jdbcType=VARCHAR},
      </if>
      <if test="updataAfter != null">
        #{updataAfter,jdbcType=VARCHAR},
      </if>
      <if test="succeed != null">
        #{succeed,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="method != null">
        #{method,jdbcType=LONGVARCHAR},
      </if>
      <if test="message != null">
        #{message,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.mlz.entity.pojo.OperationLogExample" resultType="java.lang.Long">
    select count(*) from jia_operation_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update jia_operation_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.logType != null">
        log_type = #{record.logType,jdbcType=VARCHAR},
      </if>
      <if test="record.logName != null">
        log_name = #{record.logName,jdbcType=VARCHAR},
      </if>
      <if test="record.className != null">
        class_name = #{record.className,jdbcType=VARCHAR},
      </if>
      <if test="record.updataFront != null">
        updata_front = #{record.updataFront,jdbcType=VARCHAR},
      </if>
      <if test="record.updataAfter != null">
        updata_after = #{record.updataAfter,jdbcType=VARCHAR},
      </if>
      <if test="record.succeed != null">
        succeed = #{record.succeed,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null">
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatetime != null">
        updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=BIT},
      </if>
      <if test="record.method != null">
        method = #{record.method,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.message != null">
        message = #{record.message,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update jia_operation_log
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      log_type = #{record.logType,jdbcType=VARCHAR},
      log_name = #{record.logName,jdbcType=VARCHAR},
      class_name = #{record.className,jdbcType=VARCHAR},
      updata_front = #{record.updataFront,jdbcType=VARCHAR},
      updata_after = #{record.updataAfter,jdbcType=VARCHAR},
      succeed = #{record.succeed,jdbcType=VARCHAR},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=BIT},
      method = #{record.method,jdbcType=LONGVARCHAR},
      message = #{record.message,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update jia_operation_log
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      log_type = #{record.logType,jdbcType=VARCHAR},
      log_name = #{record.logName,jdbcType=VARCHAR},
      class_name = #{record.className,jdbcType=VARCHAR},
      updata_front = #{record.updataFront,jdbcType=VARCHAR},
      updata_after = #{record.updataAfter,jdbcType=VARCHAR},
      succeed = #{record.succeed,jdbcType=VARCHAR},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.mlz.entity.pojo.OperationLogWithBLOBs">
    update jia_operation_log
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="logType != null">
        log_type = #{logType,jdbcType=VARCHAR},
      </if>
      <if test="logName != null">
        log_name = #{logName,jdbcType=VARCHAR},
      </if>
      <if test="className != null">
        class_name = #{className,jdbcType=VARCHAR},
      </if>
      <if test="updataFront != null">
        updata_front = #{updataFront,jdbcType=VARCHAR},
      </if>
      <if test="updataAfter != null">
        updata_after = #{updataAfter,jdbcType=VARCHAR},
      </if>
      <if test="succeed != null">
        succeed = #{succeed,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="method != null">
        method = #{method,jdbcType=LONGVARCHAR},
      </if>
      <if test="message != null">
        message = #{message,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.mlz.entity.pojo.OperationLogWithBLOBs">
    update jia_operation_log
    set user_id = #{userId,jdbcType=INTEGER},
      log_type = #{logType,jdbcType=VARCHAR},
      log_name = #{logName,jdbcType=VARCHAR},
      class_name = #{className,jdbcType=VARCHAR},
      updata_front = #{updataFront,jdbcType=VARCHAR},
      updata_after = #{updataAfter,jdbcType=VARCHAR},
      succeed = #{succeed,jdbcType=VARCHAR},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT},
      method = #{method,jdbcType=LONGVARCHAR},
      message = #{message,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mlz.entity.pojo.OperationLog">
    update jia_operation_log
    set user_id = #{userId,jdbcType=INTEGER},
      log_type = #{logType,jdbcType=VARCHAR},
      log_name = #{logName,jdbcType=VARCHAR},
      class_name = #{className,jdbcType=VARCHAR},
      updata_front = #{updataFront,jdbcType=VARCHAR},
      updata_after = #{updataAfter,jdbcType=VARCHAR},
      succeed = #{succeed,jdbcType=VARCHAR},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>